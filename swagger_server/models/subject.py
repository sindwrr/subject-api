# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Subject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, code: str=None, title: str=None, description: str=None, department: str=None, credits: float=None):  # noqa: E501
        """Subject - a model defined in Swagger

        :param id: The id of this Subject.  # noqa: E501
        :type id: int
        :param code: The code of this Subject.  # noqa: E501
        :type code: str
        :param title: The title of this Subject.  # noqa: E501
        :type title: str
        :param description: The description of this Subject.  # noqa: E501
        :type description: str
        :param department: The department of this Subject.  # noqa: E501
        :type department: str
        :param credits: The credits of this Subject.  # noqa: E501
        :type credits: float
        """
        self.swagger_types = {
            'id': int,
            'code': str,
            'title': str,
            'description': str,
            'department': str,
            'credits': float
        }

        self.attribute_map = {
            'id': 'id',
            'code': 'code',
            'title': 'title',
            'description': 'description',
            'department': 'department',
            'credits': 'credits'
        }
        self._id = id
        self._code = code
        self._title = title
        self._description = description
        self._department = department
        self._credits = credits

    @classmethod
    def from_dict(cls, dikt) -> 'Subject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subject of this Subject.  # noqa: E501
        :rtype: Subject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Subject.

        Unique ID of the subject  # noqa: E501

        :return: The id of this Subject.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Subject.

        Unique ID of the subject  # noqa: E501

        :param id: The id of this Subject.
        :type id: int
        """

        self._id = id

    @property
    def code(self) -> str:
        """Gets the code of this Subject.

        The code of the subject (e.g., CS101)  # noqa: E501

        :return: The code of this Subject.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Subject.

        The code of the subject (e.g., CS101)  # noqa: E501

        :param code: The code of this Subject.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def title(self) -> str:
        """Gets the title of this Subject.

        The title of the subject  # noqa: E501

        :return: The title of this Subject.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Subject.

        The title of the subject  # noqa: E501

        :param title: The title of this Subject.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this Subject.

        A brief description of the subject  # noqa: E501

        :return: The description of this Subject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Subject.

        A brief description of the subject  # noqa: E501

        :param description: The description of this Subject.
        :type description: str
        """

        self._description = description

    @property
    def department(self) -> str:
        """Gets the department of this Subject.

        The department offering the subject  # noqa: E501

        :return: The department of this Subject.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department: str):
        """Sets the department of this Subject.

        The department offering the subject  # noqa: E501

        :param department: The department of this Subject.
        :type department: str
        """
        if department is None:
            raise ValueError("Invalid value for `department`, must not be `None`")  # noqa: E501

        self._department = department

    @property
    def credits(self) -> float:
        """Gets the credits of this Subject.

        Number of credits for the subject  # noqa: E501

        :return: The credits of this Subject.
        :rtype: float
        """
        return self._credits

    @credits.setter
    def credits(self, credits: float):
        """Sets the credits of this Subject.

        Number of credits for the subject  # noqa: E501

        :param credits: The credits of this Subject.
        :type credits: float
        """
        if credits is None:
            raise ValueError("Invalid value for `credits`, must not be `None`")  # noqa: E501

        self._credits = credits
